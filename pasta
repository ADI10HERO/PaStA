#!/usr/bin/env python3

"""
PaStA - Patch Stack Analysis
A tool for tracking the evolution of patch stacks

Copyright (c) OTH Regensburg, 2016-2020

Author:
  Ralf Ramsauer <ralf.ramsauer@oth-regensburg.de>

This work is licensed under the terms of the GNU GPL, version 2.  See
the COPYING file in the top-level directory.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
details.
"""

import errno
import gc
import logging
import sys

from cmd import Cmd
from copy import deepcopy

from pypasta import Config

from bin.pasta_analyse import analyse
from bin.pasta_check_connectivity import check_connectivity
from bin.pasta_check_mbox import check_mbox
from bin.pasta_compare import compare
from bin.pasta_compare_clusters import compare_clusters
from bin.pasta_maintainers_stats import maintainers_stats
from bin.pasta_optimise_cluster import optimise_cluster
from bin.pasta_prepare_evaluation import prepare_evaluation
from bin.pasta_rate import rate
from bin.pasta_ripup import ripup
from bin.pasta_show_cluster import show_cluster
from bin.pasta_statistics import statistics
from bin.pasta_sync import sync
from bin.pasta_compare_stacks import compare_stacks
from bin.pasta_patch_descriptions import patch_descriptions
from bin.pasta_upstream_duration import upstream_duration
from bin.pasta_upstream_history import pasta_upstream_history
from bin.pasta_web import web
from bin.pasta_form_patchwork_relations import form_patchwork_relations


__author__ = 'Ralf Ramsauer'
__copyright__ = 'Copyright (c) OTH Regensburg, 2016-2020'
__credits__ = ['Ralf Ramsauer']
__license__ = 'GPLv2'
__version__ = '0.3'
__maintainer__ = 'Ralf Ramsauer'
__email__ = 'ralf.ramsauer@oth-regensburg.de'
__status__ = 'Development'

log = logging.getLogger('PaStA')
config = None


def usage(me, exit_code=errno.EINVAL):
    file = sys.stdout
    if exit_code != 0:
        file = sys.stderr

    print('PaStA - The Patch Stack Analysis (PaStA %s)\n'
          '\n'
          'usage: %s [-d] [-c project_name] sub [-h|--help]\n'
          'where sub is one of:\n'
          '  analyse\n'
          '  check_connectivity\n'
          '  check_mbox\n'
          '  compare\n'
          '  form_patchwork_relations\n'
          '  maintainers_stats\n'
          '  optimise_cluster\n'
          '  prepare_evaluation\n'
          '  rate\n'
          '  set_config\n'
          '  shell\n'
          '  sync\n'
          '  show_cluster\n'
          '  statistics\n'
          '  compare_stacks\n'
          '  compare_clusters\n'
          '  patch_descriptions\n'
          '  ripup\n'
          '  upstream_history\n'
          '  web\n'
          '\n'
          'If -c is not provided, PaStA will choose ./config as config file\n'
          '\n'
          '%s\n'
          'Licensed under %s (See COPYING)\n'
          'This is free software: you are free to change and redistribute it.\n'
          'There is NO WARRANTY, to the extent permitted by law.\n'
          '\n'
          'Written by %s.' %
          (__version__, me, __copyright__, __license__, __author__), file=file)
    sys.exit(exit_code)


def select_config(project_name=None, verbose=True):
    global config

    if not project_name:
        with open('./config', 'r') as f:
            project_name = f.read().strip()

    # We have nothing to do if the configuration is already loaded
    if config and config.project_name == project_name:
        if verbose:
            log.info('Already active: %s' % project_name)
        return True

    # Try to load the new configuration
    try:
        tmp = Config(project_name)
    except Exception as e:
        log.error('Unable to load %s: %s' % (project_name, str(e)))
        return False

    # We need to reload the configuration object. Delete the current one, if existent
    if config:
        del config
        gc.collect()
    config = tmp
    return True


def requires_config(func):
    def wrapper(*args, **kwargs):
        if not config:
            select_config()
        func(*args, **kwargs)
    return wrapper


class PastaShell(Cmd):
    prompt = 'PaStA>>> '
    intro = 'Welcome to PaStA\'s interactive shell. Type ? for a list of all commands'

    def __init__(self):
        super(PastaShell, self).__init__()

    def default(self, line: str) -> bool:
        if line in ['x', 'q', 'quit']:
            return self.do_exit(line)

        print('*** Unknown syntax: %s' % line)
        return False

    @requires_config
    def do_analyse(self, line):
        analyse(config, line.split())

    @requires_config
    def do_check_connectivity(self, line):
        check_connectivity(config, line.split())

    @requires_config
    def do_check_mbox(self, line):
        check_mbox(config, line.split())

    @requires_config
    def do_compare(self, line):
        compare(config, line.split())

    def do_compare_clusters(self, line):
        compare_clusters(line.split())

    def do_config(self, line):
        line = line.split()
        if len(line) == 0:
            if config:
                log.info('Active configuration: %s' % config.project_name)
            else:
                log.info('No configuration loaded')
            return
        sub = line.pop(0)
        if len(line) > 1 or sub not in ['load', 'save']:
            log.error('Unknown command: config %s %s' % (sub, ' '.join(line)))
            return

        project_name = None
        if len(line):
            project_name = line[0]

        if sub == 'load':
            select_config(project_name, verbose=True)
        elif sub == 'save':
            if not project_name:
                if config:
                    project_name = config.project_name
                else:
                    log.error('No configuration loaded')
                    return

            if select_config(project_name, verbose=False):
                config.set_config()

    def do_exit(self, line):
        log.info('Bye')
        return True

    def do_optimise_cluster(self, line):
        optimise_cluster(line.split())

    @requires_config
    def help_analyse(self):
        analyse(config, ['-h'])

    @requires_config
    def help_check_connectivity(self):
        check_connectivity(config, ['-h'])

    @requires_config
    def help_check_mbox(self):
        check_mbox(config, ['-h'])

    @requires_config
    def help_compare(self):
        compare(config, ['-h'])

    def help_compare_clusters(self):
        compare_clusters(['-h'])

    def help_config(self):
        print(
            'config - print current configuration\n'
            'config load [<project_name>] - load project_name configuration. Load the default configuration of no project_name given\n'
            'config save [<project_name>] - load project_name and set default configuration. Set the active configuration if no project provided.'
        )

    def help_exit(self):
        print('Exit PaStA. Usual suspect shorthands: x q quit Ctrl-D')

    def help_optimise_cluster(self):
        optimise_cluster(['-h'])

    do_EOF = do_exit


def main(argv):
    global config

    project_name = None
    me = argv.pop(0)
    level = logging.INFO

    while len(argv) and argv[0].startswith('-'):
        argument = argv.pop(0)

        if argument == '-c':
            if not argv:
                usage(me)
            project_name = argv.pop(0)
        elif argument == '-d':
            level = logging.DEBUG

    fmt = '%(asctime)-15s %(name)-15s %(levelname)-8s %(message)s'
    logging.basicConfig(level=level, stream=sys.stdout, format=fmt)
    filehandler = logging.FileHandler(filename='./log', mode='a')
    filehandler.setFormatter(logging.Formatter(fmt))
    logging.getLogger().addHandler(filehandler)
    log.info('Cmdline: ' + ' '.join(sys.argv))

    if not argv:
        usage(me)

    sub = argv.pop(0)
    if sub == 'set_config':
        if len(argv) != 1:
            usage(me, -1)
        project_name = argv[0]
        if select_config(project_name, verbose=True):
            config.set_config()
        return 0

    shell = PastaShell()
    if sub == 'shell':
        shell.cmdloop()
        return 0

    if sub in [
        'analyse',
        'check_connectivity',
        'check_mbox',
        'compare',
        'compare_clusters',
        'config',
        'optimise_cluster',
    ]:
        cmd = '%s %s' % (sub, ' '.join(argv))
        shell.onecmd(cmd)
        return 0

    select_config(project_name, verbose=True)
    if sub == '-h' or sub == '--help':
        usage(me, 0)
    elif sub == 'prepare_evaluation':
        return prepare_evaluation(config, argv)
    elif sub == 'rate':
        return rate(config, argv)
    elif sub == 'statistics':
        return statistics(config, argv)
    elif sub == 'compare_stacks':
        return compare_stacks(config, argv)
    elif sub == 'form_patchwork_relations':
        return form_patchwork_relations(config, argv)
    elif sub == 'maintainers_stats':
        return maintainers_stats(config, argv)
    elif sub == 'patch_descriptions':
        return patch_descriptions(config, argv)
    elif sub == 'ripup':
        return ripup(config, argv)
    elif sub == 'show_cluster':
        return show_cluster(config, argv)
    elif sub == 'sync':
        return sync(config, argv)
    elif sub == 'upstream_history':
        return pasta_upstream_history(config, argv)
    elif sub == 'upstream_duration':
        return upstream_duration(config, argv)
    elif sub == 'web':
        return web(config, argv)
    else:
        print('Unknown command: %s' % sub)
        usage(me)


if __name__ == '__main__':
    ret = main(deepcopy(sys.argv))
    log.info('Shutting down')
    sys.exit(ret if ret else 0)
